
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/reactnativekeyboardcontroller/EventEmitters.h>


namespace facebook::react {

void KeyboardControllerViewEventEmitter::onKeyboardMoveStart(OnKeyboardMoveStart $event) const {
  dispatchEvent("keyboardMoveStart", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "height", $event.height);
$payload.setProperty(runtime, "progress", $event.progress);
$payload.setProperty(runtime, "duration", $event.duration);
$payload.setProperty(runtime, "target", $event.target);
    return $payload;
  });
}


void KeyboardControllerViewEventEmitter::onKeyboardMove(OnKeyboardMove $event) const {
  dispatchEvent("keyboardMove", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "height", $event.height);
$payload.setProperty(runtime, "progress", $event.progress);
$payload.setProperty(runtime, "duration", $event.duration);
$payload.setProperty(runtime, "target", $event.target);
    return $payload;
  });
}


void KeyboardControllerViewEventEmitter::onKeyboardMoveEnd(OnKeyboardMoveEnd $event) const {
  dispatchEvent("keyboardMoveEnd", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "height", $event.height);
$payload.setProperty(runtime, "progress", $event.progress);
$payload.setProperty(runtime, "duration", $event.duration);
$payload.setProperty(runtime, "target", $event.target);
    return $payload;
  });
}


void KeyboardControllerViewEventEmitter::onKeyboardMoveInteractive(OnKeyboardMoveInteractive $event) const {
  dispatchEvent("keyboardMoveInteractive", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "height", $event.height);
$payload.setProperty(runtime, "progress", $event.progress);
$payload.setProperty(runtime, "duration", $event.duration);
$payload.setProperty(runtime, "target", $event.target);
    return $payload;
  });
}


void KeyboardControllerViewEventEmitter::onFocusedInputLayoutChanged(OnFocusedInputLayoutChanged $event) const {
  dispatchEvent("focusedInputLayoutChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "parentScrollViewTarget", $event.parentScrollViewTarget);
{
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", $event.layout.x);
  layout.setProperty(runtime, "y", $event.layout.y);
  layout.setProperty(runtime, "width", $event.layout.width);
  layout.setProperty(runtime, "height", $event.layout.height);
  layout.setProperty(runtime, "absoluteX", $event.layout.absoluteX);
  layout.setProperty(runtime, "absoluteY", $event.layout.absoluteY);
  $payload.setProperty(runtime, "layout", layout);
}
    return $payload;
  });
}


void KeyboardControllerViewEventEmitter::onFocusedInputTextChanged(OnFocusedInputTextChanged $event) const {
  dispatchEvent("focusedInputTextChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "text", $event.text);
    return $payload;
  });
}


void KeyboardControllerViewEventEmitter::onFocusedInputSelectionChanged(OnFocusedInputSelectionChanged $event) const {
  dispatchEvent("focusedInputSelectionChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
{
  auto selection = jsi::Object(runtime);
  {
    auto start = jsi::Object(runtime);
    start.setProperty(runtime, "x", $event.selection.start.x);
    start.setProperty(runtime, "y", $event.selection.start.y);
    start.setProperty(runtime, "position", $event.selection.start.position);
    selection.setProperty(runtime, "start", start);
  }
  {
    auto end = jsi::Object(runtime);
    end.setProperty(runtime, "x", $event.selection.end.x);
    end.setProperty(runtime, "y", $event.selection.end.y);
    end.setProperty(runtime, "position", $event.selection.end.position);
    selection.setProperty(runtime, "end", end);
  }
  $payload.setProperty(runtime, "selection", selection);
}
    return $payload;
  });
}



} // namespace facebook::react
